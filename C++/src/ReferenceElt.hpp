#ifndef REFERENCEELT_H
#define REFERENCEELT_H

#include "GeometryCore.hpp"
#include "PolygonAdvanced.hpp"

namespace PolygonAdvancedLibrary {

  /// \class contains the methods to implement the construction of the polygon in a bounding box
  class ReferenceElt : public IReferenceElt {
    private:
      vector<PolygonAdvanced> _polygons;  /// \param vector of the polygons generated by the initial polygon (in position 0) and the bounding box
      vector<Point> _boundingBox;         /// \param vector of the 4 points that constitue the bounding box

      /// \brief ComputeBoundingBox() compute the rectangular bounding box of the central polygon
      void ComputeBoundingBox(const vector<Point> &points);

      /// \brief ComputeIntersections() compute intersections between bounding box and central polygon, fill borderPoints
      void ComputeIntersections(const vector<Point> &polygonPoints, vector<Point> &borderPoints);

      /// \brief FindMeshPolygons() compute defining polygons and fill _polygons
      void FindMeshPolygons(const vector<Point> &polygonPoints, const vector<Point> &borderPoints, const map<int, int> linker);

    public:
      /// \brief ReferenceElt(polygonPoints) construct an object ReferenceElt, defining _polygons and _boundingBox
      ReferenceElt(const vector<Point> &points);

      /// Getters
      /// GetPolygonsNumber() returns the number of polygons in the reference element
      /// GetPolygon(i) returns the i-th polygon in _polygons
      /// GetPolygons() returns the vector of polygons
      /// GetPointBoundingBox(i) returns the i-th point of the bounding box
      /// GetBoundingBox() returns the vector of 4 points that define the bounding box
      int GetPolygonsNumber() { return _polygons.size(); };
      PolygonAdvanced& GetPolygon(const int& polygonPosition) { return _polygons[polygonPosition]; };
      vector<PolygonAdvanced>& GetPolygons() { return _polygons; };
      const Point& GetPointBoundingBox(const int& idPointBoundingBox) { return _boundingBox[idPointBoundingBox]; };
      vector<Point> GetBoundingBox() { return _boundingBox; };

      /// \brief Translate(x, y) translate every point of _polygons and _boundingBox by a vector (x, y)
      void Translate(const double& x, const double& y);

      /// \brief IntTranslate(n, m) translate every point of _polygons and _boundingBox by a vector (n*x, m*y)
      ///   where x, y are the dimension of the bounding box
      void IntTranslate(const int& x, const int& y);

      /// \brief PrintDebug(filepath) prints an .m file to show the polygons an the bounding box on matlab
      void PrintDebug(const string& filepath);
  };

}

#endif // REFERENCEELT_H
