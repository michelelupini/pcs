#ifndef POLYGONEDIT_H
#define POLYGONEDIT_H

#include "GeometryCore.hpp"

using namespace GeometryLibrary;

namespace PolygonEditLibrary {

  /// \class contains auxiliary methods for the cutting of the polygon
  class PolygonEdit : public IPolygonEdit{
    private:
      /// \brief reference to the interface of GeometryFactory
      IGeometryFactory& _problem;

      /// \brief CheckConvexity() establish the convexity of the polygon
      bool CheckConvexity();

      /// \brief CheckExternal() establish the exernity of the cutting line with respect to the polygon
      bool CheckExternal();

    public:
      /// \brief PolygonEdit(geometryFactory) construct the reference to IGeometryFactory
      PolygonEdit(IGeometryFactory& problem): _problem(problem) { };

      /// Getter
      /// \brief GetProblem() returns the interface of GeometryFactory
      /// \brief GetPoint(i) returns the i-th point in _points (N.B. not sorted) in _problem
      IGeometryFactory& GetProblem() { return _problem; };
      const Point GetPoint(const int& id){ return _problem.GetPoint(id); };

      /// \brief CheckSide(index, line) returns an integer in the set { -1, 0, 1 }, which labels the position of a point with respect to the segment
      ///         if not specified, the "line" input would be assumed as the cutting line
      int CheckSide(const int& pointId, const Segment& line);
      int CheckSide(const int& pointId);

      /// \brief CutPolygon() compute the sub-Polygons generated by the cut of the initial polygon with line
      void CutPolygon();
  };

}

#endif // POLYGONEDIT_H
