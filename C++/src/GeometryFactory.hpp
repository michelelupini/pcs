#ifndef GEOMETRYFACTORY_H
#define GEOMETRYFACTORY_H

#include "GeometryCore.hpp"

using namespace GeometryLibrary;

namespace GeometryFactoryLibrary {

  /// \class contains data of the cutting problem
  class GeometryFactory : public IGeometryFactory {
    private:
      string _geometryFilePath;           /// \param path of the input
      Polygon _initialPolygon;            /// \param initial polygon to be cutted
      vector<Segment> _initialEdges;      /// \param segments of the initial polygon
      Segment _line;                      /// \param cutting line
      vector<Point> _points;              /// \param vector of all the points (not sorted) charactrerized by an index
      vector<Polygon> _subPolygons;       /// \param vector of new sub-polygons generated by cutting the initial one

      vector<Polygon> _leftSubPolygons;   /// \param vector of all left-subpolygons after cutting
      vector<Polygon> _rightSubPolygons;  /// \param vector of all right-subpolygons after cutting


      /// \brief reset all the variables
      void ResetFactory();

    public:
      /// \brief GeometryFactory("input.txt") saves the path of the input file
      /// \brief CreatePolygon() creates the initial polygon and sets the initial condition to compute the cut, through an input file
      /// \brief CreatePolygon(points, vertices, segment) creates the initial polygon and sets the initial condition to compute the cut, through references to Point and int objects
      GeometryFactory(const string& geometryFilePath) { _geometryFilePath = geometryFilePath; }
      GeometryFactory() {  }
      void CreatePolygon();
      void CreatePolygon(const vector<Point>& points, const vector<int>& polygonVertices, const vector<Point>& segment);

      /// Getters (cutter)
      /// \brief GetPointsNumber() returns the number of all the points in _points
      /// \brief GetPolygon() returns the initial polygon
      /// \brief GetPolygonEdge(i) returns the i-th initial polygon edge
      /// \brief GetAllEdges() returns the vector of edges of the initial polygon
      /// \brief GetLine() returns the cutting line
      /// \brief GetPoint(i) returns the i-th point in _points (N.B. not sorted)
      /// \brief GetPointAddress(point) returns the integer that identifies point in _points, if there is not the point it returns -1
      /// \brief GetNumberSubPolygons() returns the number of sub-polygons _subPolygons
      /// \brief GetSubPolygon(i) returns the i-th sub-polygon generated by cutting the initial one
      /// \brief GetAllSubPolygons() return the vector of sub-polygons
      int GetPointsNumber() { return _points.size(); }
      const Polygon& GetPolygon() { return _initialPolygon; };
      const Segment& GetPolygonEdge(const int& edgePosition) { return _initialEdges[edgePosition]; };
      const vector<Segment>& GetAllEdges() { return _initialEdges; };
      const Segment& GetLine() { return _line; };
      const Point& GetPoint(const int& idPoint) { return _points[idPoint]; }
      int GetPointAddress(const Point& point);
      int GetNumberSubPolygons() { return _subPolygons.size(); };
      const Polygon& GetSubPolygon(const int& idPolygon) { return _subPolygons[idPolygon]; };      
      vector<Polygon>& GetAllSubPolygons() { return _subPolygons; };

      /// Getters (mesh)
      /// \brief GetNumberLeftSubPolygons() returns the number of left subpolygons
      /// \brief GetNumberLeftSubPolygons() returns the number of right subpolygons
      /// \brief GetLeftSubPolygon(i) returns thr i-th left-subpolygon
      /// \brief GetRightSubPolygon(i) returns thr i-th right-subpolygon
      int GetNumberLeftSubPolygons() { return _leftSubPolygons.size(); };
      int GetNumberRightSubPolygons() { return _rightSubPolygons.size(); };
      const Polygon& GetLeftSubPolygon(const int& idPolygon) { return _leftSubPolygons[idPolygon]; };
      const Polygon& GetRightSubPolygon(const int& idPolygon) { return _rightSubPolygons[idPolygon]; };

      /// Setters (cutter)
      /// \brief SetPoints(point) add point to _points
      /// \brief SetSubPolygons(polygon) add polygon to _subPolygons
      int SetPoints(const Point& point);
      void SetSubPolygons(const Polygon& newSubPolygon) { _subPolygons.push_back(newSubPolygon); };

      /// Setters (mesh)
      /// \brief SetLeftSubPolygons(Polygon) add newSubPolygon to _leftSubPolygons
      /// \brief SetRightSubPolygons(Polygon) add newSubPolygon to _rightSubPolygons
      void SetLeftSubPolygons(const Polygon& newSubPolygon) { _leftSubPolygons.push_back(newSubPolygon); };
      void SetRightSubPolygons(const Polygon& newSubPolygon) { _rightSubPolygons.push_back(newSubPolygon); };

  };

}

#endif // GEOMETRYFACTORY_H
